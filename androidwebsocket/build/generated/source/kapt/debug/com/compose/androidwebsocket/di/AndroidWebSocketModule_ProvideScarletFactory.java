// Generated by Dagger (https://dagger.dev).
package com.compose.androidwebsocket.di;

import com.compose.androidwebsocket.data.remote.HitBtcApi;
import com.tinder.scarlet.Lifecycle;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AndroidWebSocketModule_ProvideScarletFactory implements Factory<HitBtcApi> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<Lifecycle> lifecycleProvider;

  public AndroidWebSocketModule_ProvideScarletFactory(Provider<OkHttpClient> okHttpClientProvider,
      Provider<Lifecycle> lifecycleProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
    this.lifecycleProvider = lifecycleProvider;
  }

  @Override
  public HitBtcApi get() {
    return provideScarlet(okHttpClientProvider.get(), lifecycleProvider.get());
  }

  public static AndroidWebSocketModule_ProvideScarletFactory create(
      Provider<OkHttpClient> okHttpClientProvider, Provider<Lifecycle> lifecycleProvider) {
    return new AndroidWebSocketModule_ProvideScarletFactory(okHttpClientProvider, lifecycleProvider);
  }

  public static HitBtcApi provideScarlet(OkHttpClient okHttpClient, Lifecycle lifecycle) {
    return Preconditions.checkNotNullFromProvides(AndroidWebSocketModule.INSTANCE.provideScarlet(okHttpClient, lifecycle));
  }
}
