// Generated by Dagger (https://dagger.dev).
package com.compose.androidwebsocket.di;

import com.compose.androidwebsocket.repository.WebSocketRepositoryImpl;
import com.compose.androidwebsocket.usecases.WebSocketUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AndroidWebSocketModule_ProvideWebSocketUseCaseFactory implements Factory<WebSocketUseCase> {
  private final Provider<WebSocketRepositoryImpl> webSocketRepositoryImplProvider;

  public AndroidWebSocketModule_ProvideWebSocketUseCaseFactory(
      Provider<WebSocketRepositoryImpl> webSocketRepositoryImplProvider) {
    this.webSocketRepositoryImplProvider = webSocketRepositoryImplProvider;
  }

  @Override
  public WebSocketUseCase get() {
    return provideWebSocketUseCase(webSocketRepositoryImplProvider.get());
  }

  public static AndroidWebSocketModule_ProvideWebSocketUseCaseFactory create(
      Provider<WebSocketRepositoryImpl> webSocketRepositoryImplProvider) {
    return new AndroidWebSocketModule_ProvideWebSocketUseCaseFactory(webSocketRepositoryImplProvider);
  }

  public static WebSocketUseCase provideWebSocketUseCase(
      WebSocketRepositoryImpl webSocketRepositoryImpl) {
    return Preconditions.checkNotNullFromProvides(AndroidWebSocketModule.INSTANCE.provideWebSocketUseCase(webSocketRepositoryImpl));
  }
}
