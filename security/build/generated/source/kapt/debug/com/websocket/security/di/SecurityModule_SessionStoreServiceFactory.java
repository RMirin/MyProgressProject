// Generated by Dagger (https://dagger.dev).
package com.example.security.di;

import com.example.security.service.SessionStoreService;
import com.example.security.sessionstore.SessionStore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SecurityModule_SessionStoreServiceFactory implements Factory<SessionStoreService> {
  private final Provider<SessionStore> sessionStoreProvider;

  public SecurityModule_SessionStoreServiceFactory(Provider<SessionStore> sessionStoreProvider) {
    this.sessionStoreProvider = sessionStoreProvider;
  }

  @Override
  public SessionStoreService get() {
    return sessionStoreService(sessionStoreProvider.get());
  }

  public static SecurityModule_SessionStoreServiceFactory create(
      Provider<SessionStore> sessionStoreProvider) {
    return new SecurityModule_SessionStoreServiceFactory(sessionStoreProvider);
  }

  public static SessionStoreService sessionStoreService(SessionStore sessionStore) {
    return Preconditions.checkNotNullFromProvides(SecurityModule.INSTANCE.sessionStoreService(sessionStore));
  }
}
