// Generated by Dagger (https://dagger.dev).
package com.example.security.di;

import com.example.security.repository.SecurityRepository;
import com.example.security.usecases.SecurityUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SecurityModule_ProvideSecurityUseCaseFactory implements Factory<SecurityUseCase> {
  private final Provider<SecurityRepository> securityRepositoryProvider;

  public SecurityModule_ProvideSecurityUseCaseFactory(
      Provider<SecurityRepository> securityRepositoryProvider) {
    this.securityRepositoryProvider = securityRepositoryProvider;
  }

  @Override
  public SecurityUseCase get() {
    return provideSecurityUseCase(securityRepositoryProvider.get());
  }

  public static SecurityModule_ProvideSecurityUseCaseFactory create(
      Provider<SecurityRepository> securityRepositoryProvider) {
    return new SecurityModule_ProvideSecurityUseCaseFactory(securityRepositoryProvider);
  }

  public static SecurityUseCase provideSecurityUseCase(SecurityRepository securityRepository) {
    return Preconditions.checkNotNullFromProvides(SecurityModule.INSTANCE.provideSecurityUseCase(securityRepository));
  }
}
